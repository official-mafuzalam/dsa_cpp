{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "ZECAgSoOf3DnVHaav053U",
      "type": "text",
      "x": -297.6246249620642,
      "y": 252.2968879655436,
      "width": 3946.875,
      "height": 5548.8,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 397291938,
      "version": 182,
      "versionNonce": 906805026,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1731853289395,
      "link": null,
      "locked": false,
      "text": "1. Write a C++ program to check whether a given number is a power of two or not.\nIs 8 is power of 2: True\nIs 256 is power of 2: True\nIs 124 is power of 2: False\nClick me to see the sample solution\n\n2. Write a C++ program to check the additive persistence of a given number.\nAdditive Persistence\nConsider the process of taking a number, adding its digits, then adding the digits of the number derived from it, etc., until the remaining number has only one digit. The number of additions required to obtain a single digit from a number n is called the additive persistence of n, and the digit obtained is called the digital root of n.\nFor example, the sequence obtained from the starting number 9876 is (9876, 30, 3), so 9876 has an additive persistence of 2 and a digital root of 3. The additive persistences of the first few positive integers are 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, ... (OEIS A031286). The smallest numbers of additive persistence n for n=0, 1, ... are 0, 10, 19, 199, 19999999999999999999999, ... (OEIS A006050).\nSource: https://mathworld.wolfram.com/\nClick me to see the sample solution\n\n3. Write a C++ program to reverse the digits of a given integer.\nSample Input: 4\nSample Output: 4\n\nSample Input: 123\nSample Output: 321\nClick me to see the sample solution\n\n4. Write a C++ program to divide two integers (dividend and divisor) without using the multiplication, division and mod operators.\nDividend 7 Divisor 2\nResult: 3\nDividend -17 Divisor 5\nResult: -3\nClick me to see the sample solution\n\n5. Write a C++ program to calculate x raised to the power n (xn).\nSample Input: x = 7.0\nn = 2\nSample Output: 49\nClick me to see the sample solution\n\n6. Write a C++ program to get the fraction part from two given integers representing the numerator and denominator in string format.\nSample Input: x = 3\nn = 2\nSample Output: 1.5\nClick me to see the sample solution\n\n7. Write a C++ program to get the Excel column title that corresponds to a given column number (integer value).\nFor example:\n1 -> A\n2 -> B\n3 -> C\n...\n26 -> Z\n27 -> AA\n28 -> AB\n...\nClick me to see the sample solution\n\n8. Write a C++ program to get the column number (integer value) that corresponds to a column title as it appears on an Excel sheet.\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28\n...\nClick me to see the sample solution\n\n9. Write a C++ program to find the number of trailing zeroes in a given factorial.\nSample Input: n = 4\nSample Output: 0\nSample Input: n = 6\nSample Output: 1\nClick me to see the sample solution\n\n10. Write a C++ program to count the total number of digits 1 appearing in all positive integers less than or equal to a given integer n.\nExample:\nSample Input: n = 12,\nSample Output: 5\nReturn 5, because digit 1 occurred 5 times in the following numbers: 1, 10, 11, 12.\nClick me to see the sample solution\n\n11. Write a C++ program to add repeatedly all digits of a given non-negative number until the result has only one digit.\nExample:\nSample Input: 58\nSample Output: 4\nExplanation: The formula is like: 5 + 8 = 13, 1 + 3 = 4.\nClick me to see the sample solution\n\n12. Write a C++ program to check if a given integer is a power of three or not.\nSample Input: 9\nSample Output: true\nSample Input: 15\nSample Output: False\nClick me to see the sample solution\n\n13. For a non negative integer in the range 0 = i = n write a C++ program to calculate the number of 1's in their binary representation and return them as an array.\nOriginal number: 4\n0 1 1 2 1\nOriginal number: 7\n0 1 1 2 1 2 2 3\nClick me to see the sample solution\n\n14. Write a C++ program to get the maximum product of a given integer after breaking the integer into the sum of at least two positive integers.\nSample Input: 12\nSample Output: 81\nExplanation: 12 = 3 + 3 + 3 + 3, 3 x 3 x 3 x 3 = 81.\nSample Input: 7\nSample Output: 12\nExplanation: 7 = 3 + 2 + 2, 3 x 2 x 2 = 12.\nClick me to see the sample solution\n\n15. Write a C++ program to find the nth digit of the number 1 to n?\nInfinite integer sequence: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 .. where n is a positive integer.\nInput: 7\nOutput: 7\nInput: 12\nOutput: 1\nThe 12th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is 1, which is part of the number 11.\nClick me to see the sample solution\n\n16. Write a C++ program to find the square root of a number using the Babylonian method.\nSample Input: n = 50\nSample Output: 7.07107\nSample Input: n = 81\nSample Output: 9\nClick me to see the sample solution\n\n17. Write a C++ program to multiply two integers without using multiplication, division, bitwise operators, and loops.\nSample Input: 8, 9\nSample Output: 72\n\nInput: -11, 19\nOutput: -209\nClick me to see the sample solution\n\n18. Write a C++ program to convert a given integer to a Roman numeral.\nFrom Wikipedia:\nRoman numerals are a numeral system that originated in ancient Rome and remained the usual way of writing numbers throughout Europe well into the Late Middle Ages. Numbers in this system are represented by combinations of letters from the Latin alphabet. Modern usage employs seven symbols, each with a fixed integer value:[1]\nCPP Math exercises: Convert a given integer to a roman numeral\nSample Input: n = 7\nSample Output: Roman VII\n\nInput: n = 19\nOutput: Roman XIX\nClick me to see the sample solution\n\n19. Write a C++ program to convert a given integer to a Roman numeral.\nSample Input: n = VII\nSample Output: Integer 7\n\nInput: n = XIX\nOutput: Integer 19\nClick me to see the sample solution\n\n20. Write a C++ program to calculate the product of two positive integers represented as strings. Return the result as a string.\nSample Input: sn1 = \"12\"\nsn2 = \"5\"\nSample Output: 12 X 5 = 60\n\nSample Input: sn1 = \"48\"\nsn2 = \"85\"\nSample Output: 48 X 85 = 4080\nClick me to see the sample solution\n\n21. A decimal number is defined as a number whose whole number and fractional parts are separated by a decimal point in algebra. Write a C++ program to check if a given string is a decimal number or not.\nList of characters of a valid decimal number:\nNumbers: 0-9\nPositive/negative sign - \"+\"/\"-\"\nDecimal point - \".\"\nExponent - \"e\"\nSample Input: s = 9\nSample Output: Is 0 a decimal number? 1\n\nInput: s = abc 123\nOutput: Is abc 123 a decimal number? 0\nClick me to see the sample solution\n\n22. Write a C++ program to compute the sum of a pair of binary strings. Binary strings will be returned, and input strings shouldn't be blank or contain just 1 or 0 characters.\nSample Input: bstr1 = \"10\"\nbstr2 = \"1\"\nSample Output: 10 + 1 = 11\n\nSample Input: bstr1 = \"1100\"\nbstr2 = \"1010\"\nSample Output: 1100 + 1010 = 10110\nClick me to see the sample solution\n\n23. Write a C++ program to compute the square root of a given non-negative integer. Return type should be an integer.\nSample Input: n = 81\nSample Output: Square root of 81 = 9\nInput: n = 8\nOutput: Square root of 8 = 2\nClick me to see the sample solution\n\n24. Write a C++ program to count prime numbers less than a given positive number.\nSample Input: n = 8\nSample Output: Number of prime numbers less than 8 is 2\nSample Input: n = 30\nSample Output: Number of prime numbers less than 30 is 10\nClick me to see the sample solution\n\n25. Write a C++ program to count the total number of digits 1 present in all positive numbers less than or equal to a given integer.\nSample Input: n = 10\nSample Output: Number of digit 1 present in all +ve numbers less than or equal to 10 is 2\nSample Input: n = 19\nSample Output: Number of digit 1 present in all +ve numbers less than or equal to 19 is 12\nClick me to see the sample solution\n\n26. Write a C++ program to find the missing number in a given array of integers taken from the sequence 0, 1, 2, 3, ...,n.\nSample Input: arr[10] = {10, 9, 4, 6, 3, 2, 5, 7, 1, 0 }\nSample Output: Missing number in the said array: 8\nSample Input: arr1[4] = {0, 3, 4, 2}\nSample Output: Missing number in the said array: 1\nClick me to see the sample solution\n\n27. Write a C++ program to find the number of perfect squares (e.g. 1, 4, 9, 16, ...) that represent the sum of a given number.\nSample Input: n = 5\nNumber of perfect square whose sum equal to 5 = 2\nSample Input: n = 7\nNumber of perfect square whose sum equal to 7 = 4\nClick me to see the sample solution\n\n28. Write a C++ program to break a given integer into at least two parts (positive integers) to maximize the product of those integers.\nSample Input: n = 5\nAfter breaking in +ve integers maximumn product from 5 = 6\nSample Input: n = 12\nAfter breaking in +ve integers maximumn product from 12 = 81\nClick me to see the sample solution\n\n29. Write a C++ program that takes a number (n) and counts all numbers with distinct digits of length y within a specified range.\nRange: 0 <= y < 10n\nTest Data:\n1) -> 10\n(2) -> 91\nClick me to see the sample solution\n\n30. Write a C++ program to check whether a given positive integer is a perfect square or not.\nIn mathematics, a square number or perfect square is an integer that is the square of an integer, in other words, it is the product of some integer with itself. For example, 9 is a square number, since it can be written as 3 x 3.\nSample Input: n = 1\nIs 1 is perfect number? 1\nSample Input: n = 13\nIs 13 is perfect number? 0\nClick me to see the sample solution\n\n31. Write a C++ program to replace a given number until it becomes 1. If the given number(n) is even replace n with n/2 and if the number(n) is odd replace n with either n+1 or n-1. Find the minimum number of replacements.\nIf the given number(n) is even replace n with n/2 and if the given number(n) is odd replace n with either n+1 or n-1. Find the minimum number of replacements.\nSample Input: n = 8\nNumber of replacements: 3\nSample Input: n = 10\nNumber of replacements: 4\nClick me to see the sample solution\n\n32. Write a C++ program to find the number of arithmetic slices in a given array of integers.\nFrom Wikipedia\nIn mathematics, an arithmetic progression (AP) or arithmetic sequence is a sequence of numbers such that the difference between the consecutive terms is constant. Difference here means the second minus the first. For instance, the sequence 5, 7, 9, 11, 13, 15, . . . is an arithmetic progression with common difference of 2.\nTest Data:\nOriginal array: 1 2 3 9 4 5 6\nNumber of arithmetic slices: 2\nOriginal array: 1 3 5 7\nNumber of arithmetic slices: 3\nOriginal array: 2 1 3 4 7\nNumber of arithmetic slices: 0\nClick me to see the sample solution\n\n33. Write a C++ program to count from 1 to a specified number and display each number as the product of its prime factors.\nTest Data:\nDisplay each number as the product of its prime factors:\nFrom 1 to 23-\n1: 1\n2: 2\n3: 3\n4: 2 x 2\n5: 5\n6: 2 x 3\n7: 7\n8: 2 x 2 x 2\n9: 3 x 3\n10: 2 x 5\n11: 11\n12: 2 x 2 x 3\n13: 13\n14: 2 x 7\n15: 3 x 5\n16: 2 x 2 x 2 x 2\n17: 17\n18: 2 x 3 x 3\n19: 19\n20: 2 x 2 x 5\n21: 3 x 7\n22: 2 x 11\n23: 23\nClick me to see the sample solution",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 5545,
      "containerId": null,
      "originalText": "1. Write a C++ program to check whether a given number is a power of two or not.\nIs 8 is power of 2: True\nIs 256 is power of 2: True\nIs 124 is power of 2: False\nClick me to see the sample solution\n\n2. Write a C++ program to check the additive persistence of a given number.\nAdditive Persistence\nConsider the process of taking a number, adding its digits, then adding the digits of the number derived from it, etc., until the remaining number has only one digit. The number of additions required to obtain a single digit from a number n is called the additive persistence of n, and the digit obtained is called the digital root of n.\nFor example, the sequence obtained from the starting number 9876 is (9876, 30, 3), so 9876 has an additive persistence of 2 and a digital root of 3. The additive persistences of the first few positive integers are 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, ... (OEIS A031286). The smallest numbers of additive persistence n for n=0, 1, ... are 0, 10, 19, 199, 19999999999999999999999, ... (OEIS A006050).\nSource: https://mathworld.wolfram.com/\nClick me to see the sample solution\n\n3. Write a C++ program to reverse the digits of a given integer.\nSample Input: 4\nSample Output: 4\n\nSample Input: 123\nSample Output: 321\nClick me to see the sample solution\n\n4. Write a C++ program to divide two integers (dividend and divisor) without using the multiplication, division and mod operators.\nDividend 7 Divisor 2\nResult: 3\nDividend -17 Divisor 5\nResult: -3\nClick me to see the sample solution\n\n5. Write a C++ program to calculate x raised to the power n (xn).\nSample Input: x = 7.0\nn = 2\nSample Output: 49\nClick me to see the sample solution\n\n6. Write a C++ program to get the fraction part from two given integers representing the numerator and denominator in string format.\nSample Input: x = 3\nn = 2\nSample Output: 1.5\nClick me to see the sample solution\n\n7. Write a C++ program to get the Excel column title that corresponds to a given column number (integer value).\nFor example:\n1 -> A\n2 -> B\n3 -> C\n...\n26 -> Z\n27 -> AA\n28 -> AB\n...\nClick me to see the sample solution\n\n8. Write a C++ program to get the column number (integer value) that corresponds to a column title as it appears on an Excel sheet.\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28\n...\nClick me to see the sample solution\n\n9. Write a C++ program to find the number of trailing zeroes in a given factorial.\nSample Input: n = 4\nSample Output: 0\nSample Input: n = 6\nSample Output: 1\nClick me to see the sample solution\n\n10. Write a C++ program to count the total number of digits 1 appearing in all positive integers less than or equal to a given integer n.\nExample:\nSample Input: n = 12,\nSample Output: 5\nReturn 5, because digit 1 occurred 5 times in the following numbers: 1, 10, 11, 12.\nClick me to see the sample solution\n\n11. Write a C++ program to add repeatedly all digits of a given non-negative number until the result has only one digit.\nExample:\nSample Input: 58\nSample Output: 4\nExplanation: The formula is like: 5 + 8 = 13, 1 + 3 = 4.\nClick me to see the sample solution\n\n12. Write a C++ program to check if a given integer is a power of three or not.\nSample Input: 9\nSample Output: true\nSample Input: 15\nSample Output: False\nClick me to see the sample solution\n\n13. For a non negative integer in the range 0 = i = n write a C++ program to calculate the number of 1's in their binary representation and return them as an array.\nOriginal number: 4\n0 1 1 2 1\nOriginal number: 7\n0 1 1 2 1 2 2 3\nClick me to see the sample solution\n\n14. Write a C++ program to get the maximum product of a given integer after breaking the integer into the sum of at least two positive integers.\nSample Input: 12\nSample Output: 81\nExplanation: 12 = 3 + 3 + 3 + 3, 3 x 3 x 3 x 3 = 81.\nSample Input: 7\nSample Output: 12\nExplanation: 7 = 3 + 2 + 2, 3 x 2 x 2 = 12.\nClick me to see the sample solution\n\n15. Write a C++ program to find the nth digit of the number 1 to n?\nInfinite integer sequence: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 .. where n is a positive integer.\nInput: 7\nOutput: 7\nInput: 12\nOutput: 1\nThe 12th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is 1, which is part of the number 11.\nClick me to see the sample solution\n\n16. Write a C++ program to find the square root of a number using the Babylonian method.\nSample Input: n = 50\nSample Output: 7.07107\nSample Input: n = 81\nSample Output: 9\nClick me to see the sample solution\n\n17. Write a C++ program to multiply two integers without using multiplication, division, bitwise operators, and loops.\nSample Input: 8, 9\nSample Output: 72\n\nInput: -11, 19\nOutput: -209\nClick me to see the sample solution\n\n18. Write a C++ program to convert a given integer to a Roman numeral.\nFrom Wikipedia:\nRoman numerals are a numeral system that originated in ancient Rome and remained the usual way of writing numbers throughout Europe well into the Late Middle Ages. Numbers in this system are represented by combinations of letters from the Latin alphabet. Modern usage employs seven symbols, each with a fixed integer value:[1]\nCPP Math exercises: Convert a given integer to a roman numeral\nSample Input: n = 7\nSample Output: Roman VII\n\nInput: n = 19\nOutput: Roman XIX\nClick me to see the sample solution\n\n19. Write a C++ program to convert a given integer to a Roman numeral.\nSample Input: n = VII\nSample Output: Integer 7\n\nInput: n = XIX\nOutput: Integer 19\nClick me to see the sample solution\n\n20. Write a C++ program to calculate the product of two positive integers represented as strings. Return the result as a string.\nSample Input: sn1 = \"12\"\nsn2 = \"5\"\nSample Output: 12 X 5 = 60\n\nSample Input: sn1 = \"48\"\nsn2 = \"85\"\nSample Output: 48 X 85 = 4080\nClick me to see the sample solution\n\n21. A decimal number is defined as a number whose whole number and fractional parts are separated by a decimal point in algebra. Write a C++ program to check if a given string is a decimal number or not.\nList of characters of a valid decimal number:\nNumbers: 0-9\nPositive/negative sign - \"+\"/\"-\"\nDecimal point - \".\"\nExponent - \"e\"\nSample Input: s = 9\nSample Output: Is 0 a decimal number? 1\n\nInput: s = abc 123\nOutput: Is abc 123 a decimal number? 0\nClick me to see the sample solution\n\n22. Write a C++ program to compute the sum of a pair of binary strings. Binary strings will be returned, and input strings shouldn't be blank or contain just 1 or 0 characters.\nSample Input: bstr1 = \"10\"\nbstr2 = \"1\"\nSample Output: 10 + 1 = 11\n\nSample Input: bstr1 = \"1100\"\nbstr2 = \"1010\"\nSample Output: 1100 + 1010 = 10110\nClick me to see the sample solution\n\n23. Write a C++ program to compute the square root of a given non-negative integer. Return type should be an integer.\nSample Input: n = 81\nSample Output: Square root of 81 = 9\nInput: n = 8\nOutput: Square root of 8 = 2\nClick me to see the sample solution\n\n24. Write a C++ program to count prime numbers less than a given positive number.\nSample Input: n = 8\nSample Output: Number of prime numbers less than 8 is 2\nSample Input: n = 30\nSample Output: Number of prime numbers less than 30 is 10\nClick me to see the sample solution\n\n25. Write a C++ program to count the total number of digits 1 present in all positive numbers less than or equal to a given integer.\nSample Input: n = 10\nSample Output: Number of digit 1 present in all +ve numbers less than or equal to 10 is 2\nSample Input: n = 19\nSample Output: Number of digit 1 present in all +ve numbers less than or equal to 19 is 12\nClick me to see the sample solution\n\n26. Write a C++ program to find the missing number in a given array of integers taken from the sequence 0, 1, 2, 3, ...,n.\nSample Input: arr[10] = {10, 9, 4, 6, 3, 2, 5, 7, 1, 0 }\nSample Output: Missing number in the said array: 8\nSample Input: arr1[4] = {0, 3, 4, 2}\nSample Output: Missing number in the said array: 1\nClick me to see the sample solution\n\n27. Write a C++ program to find the number of perfect squares (e.g. 1, 4, 9, 16, ...) that represent the sum of a given number.\nSample Input: n = 5\nNumber of perfect square whose sum equal to 5 = 2\nSample Input: n = 7\nNumber of perfect square whose sum equal to 7 = 4\nClick me to see the sample solution\n\n28. Write a C++ program to break a given integer into at least two parts (positive integers) to maximize the product of those integers.\nSample Input: n = 5\nAfter breaking in +ve integers maximumn product from 5 = 6\nSample Input: n = 12\nAfter breaking in +ve integers maximumn product from 12 = 81\nClick me to see the sample solution\n\n29. Write a C++ program that takes a number (n) and counts all numbers with distinct digits of length y within a specified range.\nRange: 0 <= y < 10n\nTest Data:\n1) -> 10\n(2) -> 91\nClick me to see the sample solution\n\n30. Write a C++ program to check whether a given positive integer is a perfect square or not.\nIn mathematics, a square number or perfect square is an integer that is the square of an integer, in other words, it is the product of some integer with itself. For example, 9 is a square number, since it can be written as 3 x 3.\nSample Input: n = 1\nIs 1 is perfect number? 1\nSample Input: n = 13\nIs 13 is perfect number? 0\nClick me to see the sample solution\n\n31. Write a C++ program to replace a given number until it becomes 1. If the given number(n) is even replace n with n/2 and if the number(n) is odd replace n with either n+1 or n-1. Find the minimum number of replacements.\nIf the given number(n) is even replace n with n/2 and if the given number(n) is odd replace n with either n+1 or n-1. Find the minimum number of replacements.\nSample Input: n = 8\nNumber of replacements: 3\nSample Input: n = 10\nNumber of replacements: 4\nClick me to see the sample solution\n\n32. Write a C++ program to find the number of arithmetic slices in a given array of integers.\nFrom Wikipedia\nIn mathematics, an arithmetic progression (AP) or arithmetic sequence is a sequence of numbers such that the difference between the consecutive terms is constant. Difference here means the second minus the first. For instance, the sequence 5, 7, 9, 11, 13, 15, . . . is an arithmetic progression with common difference of 2.\nTest Data:\nOriginal array: 1 2 3 9 4 5 6\nNumber of arithmetic slices: 2\nOriginal array: 1 3 5 7\nNumber of arithmetic slices: 3\nOriginal array: 2 1 3 4 7\nNumber of arithmetic slices: 0\nClick me to see the sample solution\n\n33. Write a C++ program to count from 1 to a specified number and display each number as the product of its prime factors.\nTest Data:\nDisplay each number as the product of its prime factors:\nFrom 1 to 23-\n1: 1\n2: 2\n3: 3\n4: 2 x 2\n5: 5\n6: 2 x 3\n7: 7\n8: 2 x 2 x 2\n9: 3 x 3\n10: 2 x 5\n11: 11\n12: 2 x 2 x 3\n13: 13\n14: 2 x 7\n15: 3 x 5\n16: 2 x 2 x 2 x 2\n17: 17\n18: 2 x 3 x 3\n19: 19\n20: 2 x 2 x 5\n21: 3 x 7\n22: 2 x 11\n23: 23\nClick me to see the sample solution",
      "lineHeight": 1.2
    },
    {
      "id": "IIR0RMZZ_T3Rhzb7ferak",
      "type": "text",
      "x": -177.64519274620665,
      "y": 154.45136153278224,
      "width": 515.625,
      "height": 19.2,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1071600766,
      "version": 23,
      "versionNonce": 369670782,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1731856633991,
      "link": null,
      "locked": false,
      "text": "https://www.w3resource.com/cpp-exercises/math/index.php",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 15,
      "containerId": null,
      "originalText": "https://www.w3resource.com/cpp-exercises/math/index.php",
      "lineHeight": 1.2
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}